[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/FinalFinalTest.html",
    "href": "posts/FinalFinalTest.html",
    "title": "FinalBlog",
    "section": "",
    "text": "title: \"Reading Time: The Invention of Time Throughout the 19th Century\"\ndescription: \"Final Project\"\nauthor: \"Ziggy Ghassemi\"\ndate: \"03/18/2023\"\ndate-modified: \"03/20/2023\"\n\n\nQuestion\nHow has the usage of the word time evolved throughout literary works ranging from before the Industrial revolution until 1899?\n\n\nIntroduction\nUntil recently, the literary scholar has employed the tool of close reading to assist in analyzing text: reading between the lines to find the micro interactions between a novel, the author, the novel and its culture, the novel and its political atmosphere, the novel and science, etc. In close reading, the scholar picks a single work to shreds, interpreting the text, in ways that even the author could not imagine. For example, using textual devices such as the interruption within a novel such as Laurence Sterne’s The Life and Opinions of Tristram Shandy, Gentleman a critic could explicate the notion of how time was perceived in the mid 1700’s. Or, uncovering trauma within an author’s text could unveil suppressed personal memories that only manifest when the person is presented with certain objects or instances. Thus scholars have typically only used their own knowledge, coupled with other philosophical and scholarly work to one novel at a time.\nEnter then, the computer era, and the invention of programming tools such as Python, R, and automated tools such as Voyant that are able to, with shocking rapidity, scan an entire corpus of texts. With tools such as these, a new method of analysis became available to scholars: distant reading. Right at the beginning of the new century, literary critic Franco Moretti (2000) coined the term, defining distant reading as “understanding literature not by studying particular texts, but by aggregating and analyzing massive amounts of data”. By aggregating massive amounts of text, the scholar can see trends and patterns throughout whole periods of time by running programs such as those mentioned above, a method that close reading could simply not do. In distant reading, the macro interactions of novels are revealed. In distant reading, the macro interactions of novels are revealed, meaning the interactions between novels and their time periods, between a corpus of authors, etc. This new approach can reveal insights that would be impossible – or extremely difficult – to uncover through traditional methods. For example, patterns in language or themes used by a corpus of authors can be identified, and the gradual increase of the usages of certain words can be used to examine broader cultural trends, including but not limited to the relationship between literature and scientific ideas. These analyses are not without their limitations however. As distant reading relies on computational analysis rather than the human eye, results can sometimes be difficult to conceptualize. However, despite this, it has emerged as an invaluable tool for literary scholars to understand works within their broader context. For this project, I will be doing just that. I will be telling the story of how industrialization affected human thought gradually over the course of ~400 years through literary works. By choosing works from the pristine, pre-industrialized periods, I hope to show the subtle changes of thought based on word usage in literature.\n\n\nCleaning & Statistical Analysis\n\nimport pandas as pd\n\n# making dataframe\ndf = pd.read_csv(\"data set literature.csv\")\n\n# output the dataframe\nprint(df)\n\n\n                                       Gutenberg Link  Date  \\\n0   https://www.gutenberg.org/files/1232/1232-h/12...  1532   \n1       https://www.gutenberg.org/cache/epub/53489...  1554   \n2       https://www.gutenberg.org/cache/epub/29622...  1549   \n3       https://www.gutenberg.org/files/15272/1527...  1590   \n4       https://www.gutenberg.org/files/49065/4906...  1511   \n5       https://www.gutenberg.org/cache/epub/9371/...  1635   \n6       https://www.gutenberg.org/files/55426/5542...  1619   \n7       https://www.gutenberg.org/cache/epub/10847...  1605   \n8       https://www.gutenberg.org/files/996/996-h/...  1617   \n9       https://www.gutenberg.org/files/48688/4868...  1603   \n10      https://www.gutenberg.org/files/20890/2089...  1698   \n11      https://www.gutenberg.org/files/19116/1911...  1620   \n12      https://www.gutenberg.org/files/66359/6635...  1651   \n13      https://www.gutenberg.org/cache/epub/20/pg...  1644   \n14      https://www.gutenberg.org/cache/epub/4391/...  1700   \n15  https://www.gutenberg.org/files/1292/1292-h/12...  1759   \n16      https://www.gutenberg.org/cache/epub/1079/...  1796   \n17      https://www.gutenberg.org/cache/epub/601/p...  1719   \n18      https://www.gutenberg.org/cache/epub/521/p...  1764   \n19      https://www.gutenberg.org/cache/epub/696/p...  1740   \n20      https://www.gutenberg.org/files/6124/6124-...  1719   \n21      https://www.gutenberg.org/cache/epub/67612...  1726   \n22      https://www.gutenberg.org/files/829/829-h/...  1759   \n23      https://www.gutenberg.org/cache/epub/652/p...  1778   \n24   https://www.gutenberg.org/cache/epub/7371/pg7...  1790   \n25      https://www.gutenberg.org/cache/epub/345/p...  1897   \n26      https://www.gutenberg.org/cache/epub/84/pg...  1847   \n27      https://www.gutenberg.org/cache/epub/1260/...  1831   \n28      https://www.gutenberg.org/cache/epub/2610/...  1902   \n29      https://www.gutenberg.org/cache/epub/2852/...  1851   \n30      https://www.gutenberg.org/cache/epub/77/pg...  1819   \n31      https://www.gutenberg.org/cache/epub/41/pg...  1850   \n32      https://www.gutenberg.org/cache/epub/4274/...  1866   \n33      https://www.gutenberg.org/cache/epub/209/p...  1898   \n\n                                                Title  \\\n0                                          The Prince   \n1                     The Life of Lazarillo de Tormes   \n2                           The Book of Common Prayer   \n3                                   The Faerie Queene   \n4                                  The Book of Luther   \n5                                          Four Plays   \n6                                   The Maids Tragedy   \n7                          The History of Don Quixote   \n8                                          The Poems    \n9                       The Revenge of Bussy D'Ambois   \n10  A Short View of the Immorality, and Profanenes...   \n11              A Journal of the Pilgrims at Plymouth   \n12                                         Leviathan    \n13                           Principles of Philosophy   \n14                              The Way of the World    \n15  The Life and Opinions of Tristram Shandy, Gent...   \n16                                The Monk: A Romance   \n17        The Life and Adventures of Robinson Crusoe    \n18                             The Castle of Otranto    \n19                        Pamela; or, Virtue Rewarded   \n20                                     Love in Excess   \n21                                 Gulliver’s Travels   \n22                     Rasselas, Prince of Abyssinia    \n23                                           Evelina    \n24                                 A Sicilian Romance   \n25                                          Dracula     \n26                       Jane Eyre: An Autobiography    \n27                               Notre-Dame de Paris    \n28                     The Hound of the Baskervilles    \n29                     The House of the Seven Gables    \n30                       The Legend of Sleepy Hollow    \n31                               The Scarlet Letter     \n32                               Wives and Daughters    \n33                            The Turn of the Screw     \n\n                                Author  \n0                  Niccolò Machiavelli  \n1                            Anonymous  \n2                       Thomas Cranmer  \n3                       Edmund Spencer  \n4                        Martin Luther  \n5                    William Wycherley  \n6   Francis Beaumont and John Fletcher  \n7                  Miguel de Cervantes  \n8                           John Donne  \n9                       George Chapman  \n10                   by Jeremy Collier  \n11                     Dwight B. Heath  \n12                       Thomas Hobbes  \n13                     René Descartes   \n14                   William Congreve   \n15                    Laurence Sterne   \n16                        M. G. Lewis   \n17                       Daniel Defoe   \n18                      Horace Walpole  \n19                   Samuel Richardson  \n20                       Eliza Haywood  \n21                      Jonathan Swift  \n22                      Samuel Johnson  \n23                       Fanny Burney   \n24                 Ann Ward Radcliffe   \n25                        Bram Stoker   \n26                   Charlotte Brontë   \n27                        Victor Hugo   \n28                 Arthur Conan Doyle   \n29                Nathaniel Hawthorne   \n30                  Washington Irving   \n31                Nathaniel Hawthorne   \n32         Elizabeth Cleghorn Gaskell   \n33                        Henry James   \n\n\n\nimport requests\n\n# Read the data from the CSV file\ndf = pd.read_csv('data set literature.csv')\n\n# Drop rows with missing URLs\ndf.dropna(subset=['Gutenberg Link'], inplace=True)\n\n# Loop through each URL in the DataFrame and download the content\nfor i, row in df.iterrows():\n    url = row['Gutenberg Link']\n    response = requests.get(url)\n    with open(f'book{i}.txt', 'wb') as f:\n        f.write(response.content)\n\n\n\nimport os\nimport re\nimport requests\n\n# define the URL to download\nurl = 'https://www.gutenberg.org/cache/epub/41256/pg41256-images.html'\n\n# define the directory path to save the file\ndirectory = '1700-1800_texts'\n\n# create the directory if it doesn't exist\nif not os.path.exists(directory):\n    os.makedirs(directory)\n\n# define the filename to save the file as\nfilename = os.path.join(directory, 'pg41256-images.html')\n\n# download the webpage\nresponse = requests.get(url)\n\n# save the HTML file\nwith open(filename, 'wb') as f:\n    f.write(response.content)\n\nprint(f\"The webpage has been downloaded and saved as {filename}.\")\n\nThe webpage has been downloaded and saved as 1700-1800_texts/pg41256-images.html.\n\n\n\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\n# Add custom stopwords\ncustom_stop_words = [\"new\", \"york\", \"city\", \"like\", \"would\"]\nstop_words = stop_words.union(custom_stop_words)\n\n\n# Define a helper function to count occurrences of a word in a file\ndef count_word_in_file(filename, word):\n    with open(filename, 'r', encoding='iso-8859-1') as f:\n        contents = f.read()\n        words = contents.lower().split()\n        word_count = words.count(word)\n        return word_count\n\n# Read in the dataframe\ndf = pd.read_csv(\"data set literature.csv\")\n\n# Loop through each book file and count the number of times the word \"time\" appears\ntime_counts = []\nfor i, row in df.iterrows():\n    filename = f'book{i}.txt'\n    word_count = count_word_in_file(filename, 'time')\n    time_counts.append(word_count)\n\n# Add the time count values as a new column in the dataframe\ndf['Time Count'] = time_counts\n\n# Output the updated dataframe\nprint(df)\n\n                                       Gutenberg Link  Date  \\\n0   https://www.gutenberg.org/files/1232/1232-h/12...  1532   \n1       https://www.gutenberg.org/cache/epub/53489...  1554   \n2       https://www.gutenberg.org/cache/epub/29622...  1549   \n3       https://www.gutenberg.org/files/15272/1527...  1590   \n4       https://www.gutenberg.org/files/49065/4906...  1511   \n5       https://www.gutenberg.org/cache/epub/9371/...  1635   \n6       https://www.gutenberg.org/files/55426/5542...  1619   \n7       https://www.gutenberg.org/cache/epub/10847...  1605   \n8       https://www.gutenberg.org/files/996/996-h/...  1617   \n9       https://www.gutenberg.org/files/48688/4868...  1603   \n10      https://www.gutenberg.org/files/20890/2089...  1698   \n11      https://www.gutenberg.org/files/19116/1911...  1620   \n12      https://www.gutenberg.org/files/66359/6635...  1651   \n13      https://www.gutenberg.org/cache/epub/20/pg...  1644   \n14      https://www.gutenberg.org/cache/epub/4391/...  1700   \n15  https://www.gutenberg.org/files/1292/1292-h/12...  1759   \n16      https://www.gutenberg.org/cache/epub/1079/...  1796   \n17      https://www.gutenberg.org/cache/epub/601/p...  1719   \n18      https://www.gutenberg.org/cache/epub/521/p...  1764   \n19      https://www.gutenberg.org/cache/epub/696/p...  1740   \n20      https://www.gutenberg.org/files/6124/6124-...  1719   \n21      https://www.gutenberg.org/cache/epub/67612...  1726   \n22      https://www.gutenberg.org/files/829/829-h/...  1759   \n23      https://www.gutenberg.org/cache/epub/652/p...  1778   \n24   https://www.gutenberg.org/cache/epub/7371/pg7...  1790   \n25      https://www.gutenberg.org/cache/epub/345/p...  1897   \n26      https://www.gutenberg.org/cache/epub/84/pg...  1847   \n27      https://www.gutenberg.org/cache/epub/1260/...  1831   \n28      https://www.gutenberg.org/cache/epub/2610/...  1902   \n29      https://www.gutenberg.org/cache/epub/2852/...  1851   \n30      https://www.gutenberg.org/cache/epub/77/pg...  1819   \n31      https://www.gutenberg.org/cache/epub/41/pg...  1850   \n32      https://www.gutenberg.org/cache/epub/4274/...  1866   \n33      https://www.gutenberg.org/cache/epub/209/p...  1898   \n\n                                                Title  \\\n0                                          The Prince   \n1                     The Life of Lazarillo de Tormes   \n2                           The Book of Common Prayer   \n3                                   The Faerie Queene   \n4                                  The Book of Luther   \n5                                          Four Plays   \n6                                   The Maids Tragedy   \n7                          The History of Don Quixote   \n8                                          The Poems    \n9                       The Revenge of Bussy D'Ambois   \n10  A Short View of the Immorality, and Profanenes...   \n11              A Journal of the Pilgrims at Plymouth   \n12                                         Leviathan    \n13                           Principles of Philosophy   \n14                              The Way of the World    \n15  The Life and Opinions of Tristram Shandy, Gent...   \n16                                The Monk: A Romance   \n17        The Life and Adventures of Robinson Crusoe    \n18                             The Castle of Otranto    \n19                        Pamela; or, Virtue Rewarded   \n20                                     Love in Excess   \n21                                 Gulliver’s Travels   \n22                     Rasselas, Prince of Abyssinia    \n23                                           Evelina    \n24                                 A Sicilian Romance   \n25                                          Dracula     \n26                       Jane Eyre: An Autobiography    \n27                               Notre-Dame de Paris    \n28                     The Hound of the Baskervilles    \n29                     The House of the Seven Gables    \n30                       The Legend of Sleepy Hollow    \n31                               The Scarlet Letter     \n32                               Wives and Daughters    \n33                            The Turn of the Screw     \n\n                                Author  Time Count  \n0                  Niccolò Machiavelli          76  \n1                            Anonymous          34  \n2                       Thomas Cranmer         192  \n3                       Edmund Spencer          33  \n4                        Martin Luther         173  \n5                    William Wycherley          24  \n6   Francis Beaumont and John Fletcher         105  \n7                  Miguel de Cervantes          15  \n8                           John Donne         494  \n9                       George Chapman          48  \n10                   by Jeremy Collier          45  \n11                     Dwight B. Heath          29  \n12                       Thomas Hobbes          30  \n13                     René Descartes           26  \n14                   William Congreve           32  \n15                    Laurence Sterne           23  \n16                        M. G. Lewis          188  \n17                       Daniel Defoe          128  \n18                      Horace Walpole         175  \n19                   Samuel Richardson          21  \n20                       Eliza Haywood         144  \n21                      Jonathan Swift         107  \n22                      Samuel Johnson         102  \n23                       Fanny Burney          100  \n24                 Ann Ward Radcliffe          101  \n25                        Bram Stoker          249  \n26                   Charlotte Brontë           76  \n27                        Victor Hugo          155  \n28                 Arthur Conan Doyle          165  \n29                Nathaniel Hawthorne           55  \n30                  Washington Irving           54  \n31                Nathaniel Hawthorne           15  \n32         Elizabeth Cleghorn Gaskell          392  \n33                        Henry James           44  \n\n\n\ndef extract_words_from_file(filename):\n    with open(filename, 'r', encoding='iso-8859-1') as f:\n        contents = f.read()\n        words = ''.join(c if c.isalpha() else ' ' for c in contents).lower().split()\n        return words\n\n        return words\nfor i in range(len(df)):\n    filename = f\"book{i}.txt\"\n    words = extract_words_from_file(filename)\n    print(f'{filename}: {len(words)} words')\n    \n\n\nbook0.txt: 56745 words\nbook1.txt: 38625 words\nbook2.txt: 242346 words\nbook3.txt: 153821 words\nbook4.txt: 240318 words\nbook5.txt: 41421 words\nbook6.txt: 218643 words\nbook7.txt: 72763 words\nbook8.txt: 481034 words\nbook9.txt: 271811 words\nbook10.txt: 144473 words\nbook11.txt: 43107 words\nbook12.txt: 49142 words\nbook13.txt: 101352 words\nbook14.txt: 39650 words\nbook15.txt: 40238 words\nbook16.txt: 231164 words\nbook17.txt: 150819 words\nbook18.txt: 128568 words\nbook19.txt: 44877 words\nbook20.txt: 240349 words\nbook21.txt: 110908 words\nbook22.txt: 113452 words\nbook23.txt: 45941 words\nbook24.txt: 73860 words\nbook25.txt: 178471 words\nbook26.txt: 82533 words\nbook27.txt: 210948 words\nbook28.txt: 211650 words\nbook29.txt: 70261 words\nbook30.txt: 117161 words\nbook31.txt: 16477 words\nbook32.txt: 299005 words\nbook33.txt: 51914 words\n\n\n\n# Loop through each row in the DataFrame and print the title, author, and date\nfor i, row in df.iterrows():\n    title = row['Title']\n    author = row['Author']\n    date = row['Date']\n    print(f\"Book {i}: '{title}' by {author}, published in {date}\")\ndef count_word_in_file(filename, word):\n    with open(filename, 'r', encoding='iso-8859-1') as f:\n        contents = f.read()\n        words = contents.lower().split()\n        word_count = words.count(word)\n        return word_count\n\n\nBook 0: 'The Prince' by Niccolò Machiavelli, published in 1532\nBook 1: 'The Life of Lazarillo de Tormes' by Anonymous, published in 1554\nBook 2: 'The Book of Common Prayer' by Thomas Cranmer, published in 1549\nBook 3: 'The Faerie Queene' by Edmund Spencer, published in 1590\nBook 4: 'The Book of Luther' by Martin Luther, published in 1511\nBook 5: 'Four Plays' by William Wycherley, published in 1635\nBook 6: ' The Maids Tragedy' by Francis Beaumont and John Fletcher, published in 1619\nBook 7: ' The History of Don Quixote' by Miguel de Cervantes, published in 1605\nBook 8: 'The Poems ' by John Donne, published in 1617\nBook 9: 'The Revenge of Bussy D'Ambois' by George Chapman, published in 1603\nBook 10: 'A Short View of the Immorality, and Profaneness of the English Stage' by by Jeremy Collier, published in 1698\nBook 11: 'A Journal of the Pilgrims at Plymouth' by Dwight B. Heath, published in 1620\nBook 12: 'Leviathan ' by Thomas Hobbes, published in 1651\nBook 13: 'Principles of Philosophy' by René Descartes , published in 1644\nBook 14: 'The Way of the World ' by William Congreve , published in 1700\nBook 15: 'The Life and Opinions of Tristram Shandy, Gentleman ' by Laurence Sterne , published in 1759\nBook 16: 'The Monk: A Romance' by M. G. Lewis , published in 1796\nBook 17: 'The Life and Adventures of Robinson Crusoe ' by Daniel Defoe , published in 1719\nBook 18: 'The Castle of Otranto ' by Horace Walpole, published in 1764\nBook 19: 'Pamela; or, Virtue Rewarded' by Samuel Richardson, published in 1740\nBook 20: 'Love in Excess' by Eliza Haywood, published in 1719\nBook 21: 'Gulliver’s Travels' by Jonathan Swift, published in 1726\nBook 22: 'Rasselas, Prince of Abyssinia ' by Samuel Johnson, published in 1759\nBook 23: 'Evelina ' by Fanny Burney , published in 1778\nBook 24: 'A Sicilian Romance' by Ann Ward Radcliffe , published in 1790\nBook 25: 'Dracula  ' by Bram Stoker , published in 1897\nBook 26: 'Jane Eyre: An Autobiography ' by Charlotte Brontë , published in 1847\nBook 27: 'Notre-Dame de Paris ' by Victor Hugo , published in 1831\nBook 28: 'The Hound of the Baskervilles ' by Arthur Conan Doyle , published in 1902\nBook 29: 'The House of the Seven Gables ' by Nathaniel Hawthorne , published in 1851\nBook 30: 'The Legend of Sleepy Hollow ' by Washington Irving , published in 1819\nBook 31: 'The Scarlet Letter  ' by Nathaniel Hawthorne , published in 1850\nBook 32: 'Wives and Daughters ' by Elizabeth Cleghorn Gaskell , published in 1866\nBook 33: 'The Turn of the Screw  ' by Henry James , published in 1898\n\n\n\ndef count_word_in_file(filename, word):\n    with open(filename, 'r', encoding='iso-8859-1') as f:\n        contents = f.read()\n        words = contents.lower().split()\n        word_count = words.count(word)\n        return word_count\n\n# Loop through each book file and count the number of times the word \"time\" appears\nfor i, row in df.iterrows():\n    filename = f'book{i}.txt'\n    word_count = count_word_in_file(filename, 'time')\n    print(f\"Book {i}: {word_count} occurrences of the word 'time'\")\n\nBook 0: 76 occurrences of the word 'time'\nBook 1: 34 occurrences of the word 'time'\nBook 2: 192 occurrences of the word 'time'\nBook 3: 33 occurrences of the word 'time'\nBook 4: 173 occurrences of the word 'time'\nBook 5: 24 occurrences of the word 'time'\nBook 6: 105 occurrences of the word 'time'\nBook 7: 15 occurrences of the word 'time'\nBook 8: 494 occurrences of the word 'time'\nBook 9: 48 occurrences of the word 'time'\nBook 10: 45 occurrences of the word 'time'\nBook 11: 29 occurrences of the word 'time'\nBook 12: 30 occurrences of the word 'time'\nBook 13: 26 occurrences of the word 'time'\nBook 14: 32 occurrences of the word 'time'\nBook 15: 23 occurrences of the word 'time'\nBook 16: 188 occurrences of the word 'time'\nBook 17: 128 occurrences of the word 'time'\nBook 18: 175 occurrences of the word 'time'\nBook 19: 21 occurrences of the word 'time'\nBook 20: 144 occurrences of the word 'time'\nBook 21: 107 occurrences of the word 'time'\nBook 22: 102 occurrences of the word 'time'\nBook 23: 100 occurrences of the word 'time'\nBook 24: 101 occurrences of the word 'time'\nBook 25: 249 occurrences of the word 'time'\nBook 26: 76 occurrences of the word 'time'\nBook 27: 155 occurrences of the word 'time'\nBook 28: 165 occurrences of the word 'time'\nBook 29: 55 occurrences of the word 'time'\nBook 30: 54 occurrences of the word 'time'\nBook 31: 15 occurrences of the word 'time'\nBook 32: 392 occurrences of the word 'time'\nBook 33: 44 occurrences of the word 'time'\n\n\n\n\nA Broad Stroke\nThe expansion of London during the latter half of the 18th century saw the rise of industry, with the first modern factory, the Slater Mill. While this benefited humanity in ways that were not immediately apparent, the damage this would do would be felt to the present day such as deforestation, increased carbon dioxide emissions, and constant light pollution. The industrialization of cities like London also polluted human life, with young children being forced into dangerous factory work and losing cherished innocence through harsh working conditions. The damages and pain inflicted on children and the working classes were not the only effects of industrialization, it also forever changed humanity’s natural perception of time. This period of history marked the beginning of a significant shift in human thought and behavior, as people began to think of time as something that could be measured, standardized, and used for economic purposes.\n\nimport matplotlib.pyplot as plt\n\n# read in the dataset\ndf = pd.read_csv(\"data set literature.csv\")\n\n# create a new column for the word count of \"time\" in each book\ndf['Time Count'] = 0\n\n# loop through each book file and count the number of times the word \"time\" appears\nfor i, row in df.iterrows():\n    filename = f'book{i}.txt'\n    with open(filename, 'r', encoding='iso-8859-1') as f:\n        contents = f.read()\n        words = contents.lower().split()\n        word_count = words.count('time')\n        df.at[i, 'Time Count'] = word_count\n\n# filter the dataframe to only include books published between 1532 and 1902\nfiltered_df = df[(df['Date'] >= 1550) & (df['Date'] <= 1902)]\n\n# group the filtered dataframe by year and sum the time counts\ngrouped_df = filtered_df.groupby('Date')['Time Count'].sum().reset_index()\n\n# plot a histogram of the time count over the years\nplt.hist(grouped_df['Date'], bins=20, weights=grouped_df['Time Count'], color='blue', alpha=0.5)\nplt.title('Usage of the word \"time\" in novels published from 1532 to 1902')\nplt.xlabel('Date')\nplt.ylabel('Frequency of \"time\"')\nplt.show()\n\n\n\n\n\n\nOutlier\nThe graph above shows the usage of the word “time” in the novels I collected from 1532 - 1902. Though the graph supports my analysis by showing most of the usage between 1800-1902, there is one major outlier, Don Quixote, by Miguel Cervantes, which was published in 1605. It is common thought Cervantes was “far ahead of [his] time” with his seminal novel. Scholars even state that he played with themes that did not become popular for another century or two, which ties in perfectly with my observation that “time” was not showing more frequently in novels before 1700.\n\n\n1790 to 1902\nThe period from 1800 to 1902 saw significant changes in the world, with the emergence of industrialization and the rise of the working class. The first set of literary works that were chosen were from this period of time. Within a corpus of ten works of Gothic literature from across the century, ranging from Mary Shelly’s Frankenstein to Bram Stoker’s Dracula, the word time was used a total of 2,320 times. This is unsurprising, as factory work and living by the clock was basically a standard for the working class in the Victorian era. Not to mention the construction of Big Ben in 1843, would have cemented the concept of time in everyone’s minds. Not only Big Ben, but the railway as well made the passage of time a constant in Victorian thought. So much so, that scholars read Dracula as a manifestation of this. Some claim that Stoker critiques the automaton-like nature of living by the clock. Johnathan Harker’s trip across the forest to the Count’s place of residence is viewed as time travel to a place locked in the past, and while this past is full of fears rooted in superstition, it is still quaint. Big Ben, the railroads, and Dracula all lead back to industrialization and factory work, showing how living by the clock dominated cultural thought. This is seen in the fact that even though Dracula is told through a retelling of journal entries, as David Seed (1985, 74) states “nothing stands in the way of the narrative’s linear impetus”, like the clock that continously ticks forward. The fact that the novels chosen for this dataset through this time period have the highest word count of “time” perfectly demonstrates this.\nI chose this wide ranging span of years because in 1902, Hound of the Baskervilles by Sir Arthur Conan Doyle was published, which still heavily relied on Victorian values. Ann Radcliff’s A Sicilian Romance also predicts Victorian values and holds Gothic values held in Victorian decades.\n\n!pip install wordcloud\n\nRequirement already satisfied: wordcloud in /opt/conda/lib/python3.10/site-packages (1.8.2.2)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from wordcloud) (3.6.3)\nRequirement already satisfied: numpy>=1.6.1 in /opt/conda/lib/python3.10/site-packages (from wordcloud) (1.24.1)\nRequirement already satisfied: pillow in /opt/conda/lib/python3.10/site-packages (from wordcloud) (9.4.0)\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (3.0.9)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (1.4.4)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (4.38.0)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (1.0.7)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (0.11.0)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (2.8.2)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->wordcloud) (23.0)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.16.0)\n\n\n\nimport os\nimport re\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords\n\n# Create a custom stopwords list\ncustom_stopwords = set(stopwords.words('english'))\ncustom_stopwords.update(['href', 'div', 'span', 'class', 'dquo'])\ncustom_stopwords.update(['br', 'ldquo', 'p', 'mdash', 'footnote', 'rsquo',\n                         'rdquo', 'pagenum', 'u','width','nbsp', 'id', 'FNanchor', 'name', 'page', \n                         'pagei', 'hb', 'stanza', 'said', 'one', 'say', 'would', 'right', 'lnumber', 'Quixote', 'Sancho',\n                        'linenum', 'F', 'label', 'label', 'pfn', 'F', 'h', 'td td', 'Luther', 'may', 'see', 'make', 'man', 'come',\n                        'b', 'trtd', 'thy', 'thee', 'like', 'td td', 'tr', 'td', 'pg', 'could', 'upon', 'much', 'made', 'shall'])\n\n# Read the text files from the directory\ntext = ''\nfor filename in os.listdir('1790-1902_texts'):\n    # Add an if statement to skip hidden directories\n    if not filename.startswith('.'):\n        with open(f'1790-1902_texts/{filename}', 'r', encoding='ISO-8859-1') as f:\n            text += f.read()\n# Remove non-alphabetic characters\ntext = re.sub('[^A-Za-z]+', ' ', text)\n\n# Generate the wordcloud\nwc = WordCloud(width=500, height=600, background_color='black', stopwords=custom_stopwords).generate(text)\n\n# Display the wordcloud\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n\n\n\n\nThe wordcloud shows how important the concept of time was during the years 1790-1902.\n\n\n1700-1800\nFrom Daniel Defoe’s Robinson Crusoe to Laurence Sterne’s The Life and Opinions of Tristram Shandy, Gentleman, and into the beginnings of Gothic literature, the notion of precise time began seeping into thought between the years 1700 and 1800. The 1,743 instances of the word time, in this subset of works, is a clear statement of the growing phenomenon of relying on the clock. The actual beginnings of the Industrial Revolution are hotly debated, with some placing the start of it around 1750, and others saying around 1760. A novel such as Tristram Shandy would support the former with its famous final lines of the opening page “‘pray, my dear,’ quoth my mother’ have you not forgot to wind up the clock?” (Sterne, 1750, 6). On this page, the narrator Tristram, blames this interruption by his mother during his parents’ intimacy for him being generally unlucky. This can be attributed to the rise of the Industrial Revolution, which led to significant change in how people perceived time and the value of their time. As scholar Amit Yahevstates “during this period clocks came to control industrial production” (2018, 873). Tristram’s father was a man so reliant on the clock, that every little bit of his life was dependent on its ticks. It would make sense then for the question to be such a pivotal one, as it interrupted the most important aspect of production to an industrial society: the procreation of new life. Since, as is well known, the Industrial Revolution was notorious for employing massive amounts of children under extremely poor working conditions.\n\nimport os\nfrom nltk.corpus import stopwords\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Create a custom stopwords list\ncustom_stopwords = set(stopwords.words('english'))\ncustom_stopwords.update(['href', 'div', 'span', 'class', 'dquo'])\ncustom_stopwords.update(['br', 'ldquo', 'p', 'mdash', 'footnote', 'rsquo',\n                         'rdquo', 'pagenum', 'u','width','nbsp', 'id', 'FNanchor', 'name', 'page', \n                         'pagei', 'hb', 'stanza', 'said', 'one', 'say', 'would', 'right', 'lnumber', 'Quixote', 'Sancho',\n                        'linenum', 'F', 'label', 'label', 'pfn', 'F', 'h', 'td td', 'Luther', 'may', 'see', 'make', 'man', 'come',\n                        'b', 'trtd', 'thy', 'thee', 'like', 'td td', 'tr', 'td', 'pg', 'could', 'upon', 'much', 'made', 'shall', 'well'])\n\n# Read the text files from the directory\ntext = ''\nfor filename in os.listdir('1700-1800_texts'):\n    # Add an if statement to skip hidden directories\n    if not filename.startswith('.'):\n        with open(f'1700-1800_texts/{filename}', 'r', encoding='ISO-8859-1') as f:\n            text += f.read()\n# Remove non-alphabetic characters\ntext = re.sub('[^A-Za-z]+', ' ', text)\n\n# Generate the wordcloud\nwc = WordCloud(width=500, height=600, background_color='black', stopwords=custom_stopwords).generate(text)\n\n# Display the wordcloud\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n\n\n\n\nThe word cloud shows the growing importance of the word “time”.\n\n\n1500-1700\nBetween the years 1500 and 1700, the world underwent a significant transformation. This period saw the Age of Discovery, the Renaissance, the Reformation, and the Scientific Revolution. It was a time of great social, economic, and cultural changes that laid the foundation for the clock’s growing importance in the following centuries. A broader scan of the words revealed more religious words such as “heaven” and “God” being more common. Despite the transformation that occurred during this period, it is fascinating to note the non-use of the word “time”. A possibility for this is that perhaps the concept of time was still evolving in peoples’ minds, people who were farmers, agriculture workers who were not as beholden to clocks, but rather to the rise and fall of the sun and the change of seasons. Though clocks were popping up here and there, bell towers were still enough for most people. The clock as it is known today (mostly) was not adopted in households until the late 15th century, with the first watch appearing in Italy, France, and Germany in 1492, and then only in aristocratic households. From then on, the importance of time and the measurement of it became more and more prominent in people’s lives. The Industrial Revolution of the 18th and 19th centuries would further increase the importance of timekeeping, as factories needed to be run on strict schedules to maximize productivity.\n\nfrom nltk.corpus import stopwords\n\n# Create a custom stopwords list\ncustom_stopwords = set(stopwords.words('english'))\ncustom_stopwords.update(['href', 'div', 'span', 'class', 'dquo'])\ncustom_stopwords.update(['br', 'ldquo', 'p', 'mdash', 'footnote', 'rsquo',\n                         'rdquo', 'pagenum', 'u','width','nbsp', 'id', 'FNanchor', 'name', 'page', \n                         'pagei', 'hb', 'stanza', 'said', 'one', 'say', 'would', 'right', 'lnumber', 'Quixote', 'Sancho',\n                        'linenum', 'F', 'label', 'label', 'pfn', 'F', 'h', 'td td', 'Luther', 'may', 'see', 'make', 'man', 'come',\n                        'b', 'trtd', 'thy', 'thee', 'like', 'td td', 'tr', 'td', 'pg', 'love', 'know', 'good', 'though', 'shall',\n                        'us', 'poem', 'yet', '.', 'let', 'must', 'well', 'could', 'project gutenberg', 'ln'])\n\n# Read the text files from the directory\ntext = ''\nfor filename in os.listdir('1500-1700_texts'):\n    # Add an if statement to skip hidden directories\n    if not filename.startswith('.'):\n        with open(f'1500-1700_texts/{filename}', 'r', encoding='ISO-8859-1') as f:\n            text += f.read()\n# Remove non-alphabetic characters\ntext = re.sub('[^A-Za-z]+', ' ', text)\n\n# Generate the wordcloud\nwc = WordCloud(width=500, height=600, background_color='black', stopwords=custom_stopwords).generate(text)\n\n# Display the wordcloud\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n\n\n\n\n\n\nimport seaborn as sns\n\n# read in the dataset\ndf = pd.read_csv(\"data set literature.csv\")\n\n# create new columns for the word counts of \"time\" and \"god\" in each book\ndf['Time Count'] = 0\ndf['God Count'] = 0\n\n# loop through each book file and count the number of times the words \"time\" and \"god\" appear\nfor i, row in df.iterrows():\n    filename = f'book{i}.txt'\n    try:\n        with open(filename, 'r', encoding='iso-8859-1') as f:\n            contents = f.read()\n            words = contents.lower().split()\n            time_count = words.count('time')\n            god_count = words.count('god')\n            df.at[i, 'Time Count'] = time_count\n            df.at[i, 'God Count'] = god_count\n    except FileNotFoundError:\n        pass\n\n# filter the dataframe to only include books published between 1500 and 1700\nfiltered_df = df[(df['Date'] >= 1500) & (df['Date'] <= 1700)]\n\n# group the filtered dataframe by year and sum the word counts\ngrouped_df = filtered_df.groupby('Date')[['Time Count', 'God Count']].sum()\n\n# plot a heatmap of the word counts over the years\nsns.heatmap(grouped_df, cmap=\"YlGnBu\")\nplt.title('Usage of the words \"time\" and \"god\" in novels published from 1500 to 1902')\nplt.xlabel('Word')\nplt.ylabel('Year')\nplt.show()\n\n\n\n\nThis heat map compares the usage of the words “God” and “Time” in a corpus of works from the 1500-1700 time period. The comparison offers valuable information regarding the relative significance and occurrence of these concepts in literature during that era. The histogram depicts that “God” was more frequently used than “Time” in these works, which is not unexpected, given the religious and theological nature of many texts at that time. Notably, both words experienced an increase in usage during the early 1600s, possibly due to the influence of the Protestant Reformation and the emergence of novel concepts and philosophies.\n\n\nConclusion\nIn conclusion, distant reading provides a valuable tool for literary scholars to study literature within its broader historical context and to identify patterns and trends such as the one presented above. Though not without its faults, and still requiring human interaction, with a human touch, distant reading becomes a welcome companion to close reading. The analysis of this dataset of literary works through distant reading techniques provides a unique insight into the changing cultural and social trends over time. By examining the usage of certain words and themes across different periods, in this instance the word “time”, subtle shifts in human thought and behavior become clear. For example, the case study presented by the aggregated data highlights the growing importance of time and the clock in society, starting from pre-industrialzied eras, right up to the twentieth century. The lack of the word “time” in the earlier works suggests that in the collective thought “time” as it came to be known in the modern definition was a direct result of the workplaces of the Industrial Revolution, caused by its dependance on hourly shifts and train schedules.\n\n\nImportant Note\nWhile I tried to be encompassing with my dataset, I do realize it is small and therefore limited. While there’s a wealth of information on literature published in previous centuries on Wikipedia, I was reliant on what was available on Project Gutenberg, which did not have everything. I hope to continue to develop this project possibly for my Digital Humanities capstone.\n\n\nReferences\nRaymer, Miles. “Review: Miguel De Cervantes’s ‘Don Quixote.’” words and dirt RSS. Accessed March 18, 2023. http://www.words-and-dirt.com/words/review-miguel-de-cervantess-don-quixote/#:~:text=It’s%20hard%20to%20overstate%20how,two%20or%20three%20centuries%20later.\nSchivelbusch, Wolfgang. The Railway Journey the Industrialization of Time and Space in the 19. Century. Leamington Spa: Berg, 1986.\nSeed, David. “The Narrative Method of Dracula.” Nineteenth-Century Fiction 40, no. 1 (1985): 61–75. https://doi.org/10.2307/3044836.\nSherman, Stuart. Telling Time: Clocks, Diaries, and English Diurnal Form, 1660-1785. Chicago: University of Chicago Press, 1997.\nYahav, Amit S. Feeling Time: Duration, the Novel, and Eighteenth-Century Sensibility. Philadelphia: University of Pennsylvania Press, 2018."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FinalBlog",
    "section": "",
    "text": "Question\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 19, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 16, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]